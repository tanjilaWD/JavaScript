// Read/Get
/*
const url = 'https://dummyjson.com/test';
fetch(url)
.then((res) => res.json())
.then((data)=> console.log(data));
*/

//Create/post
const url = 'https://dummyjson.com/test';
const user = {name: 'John Doe', email: 'john.doe@example.com'}
const options = {
    method: 'POST',
    body: JSON.stringify(user),
    headers:{
        'Content-type': 'application/json',
    },
}
.fetch(url, options)
.then(res => res.json())
.then(data => console.log(data))
.catch(error => console.error(error));

//Update(put,patch)
const Url = 'https://dummyjson.com/test';
const updatedUser ={name:'John Doe', email: 'john.doe@newemail.com'};
const Options = {
mathod: 'PUT',
body: JSON.stringify(updatedUser),
headers:{
    'Content-type': 'application/json',
},
};
fetch(url, options)
.then(res => res.json())
.then(data => console.log(data))
.catch(error => console.error(error));


//Delete
const URL = 'https://dummyjson.com/test';
const OPTIONS = {
    method: 'DELETE',
};
fetch(URL,OPTIONS)
.then(res => res.json())
.then(data => console.log('Deleted:', data))
.catch(error => console.error(error));

/*
рззя╕ПтГг ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рж┐рж╕рзНржЯрзЗржо ржирж╛ржХрж┐ ржорзЗрж░рж┐ржб, ржПржЗ ржЯрж╛ржЗржкрзЗрж░ ржбрж╛ржЯрж╛ ржЪрзЗржЮрзНржЬ ржХрж░рж▓рзЗ PUT ржирж╛ PATCH рж╣ржмрзЗ?
тЮбя╕П ржпржжрж┐ ржкрзБрж░рзЛ ржЕржмржЬрзЗржХрзНржЯ (рж╕ржм ржлрж┐рж▓рзНржб) ржЖржкржбрзЗржЯ ржХрж░рзЛ, рждрж╛рж╣рж▓рзЗ PUTред
тЮбя╕П ржЖрж░ ржпржжрж┐ рж╢рзБржзрзБ ржХрж┐ржЫрзБ ржлрж┐рж▓рзНржб (partial update) ржЪрзЗржЮрзНржЬ ржХрж░рзЛ, рждрж╛рж╣рж▓рзЗ PATCHред
ЁЯСЙ ржЙржжрж╛рж╣рж░ржг:

PUT = ржкрзБрж░рж╛ ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржирждрзБржи ржбрж╛ржЯрж╛рзЯ replace ржХрж░рж╛

PATCH = рж╢рзБржзрзБ name ржмрж╛ image change ржХрж░рж╛

рзия╕ПтГг ржбрж╛ржЯрж╛ржмрзЗржЬрзЗ ржирждрзБржи ржЗржиржлрж░ржорзЗрж╢ржи ржпрзЛржЧ ржХрж░рж╛рж░ ржЬржирзНржп ржХрзЛржи HTTP ржорзЗржержб ржмрзНржпржмрж╣рзГржд рж╣рзЯ?
тЮбя╕П POST ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред
ржХрж╛рж░ржг POST ржорж╛ржирзЗ ржирждрзБржи resource create ржХрж░рж╛ред

рзйя╕ПтГг ржПржХржЯрж╛ ржУрзЯрзЗржмрж╕рж╛ржЗржЯрзЗ ржпржЦржи ржнрж┐ржбрж┐ржУ ржжрзЗржЦрждрзЗ ржпрж╛ржЗ, рждржЦржи ржХрзА ржзрж░ржирзЗрж░ ржЕржкрж╛рж░рзЗрж╢ржи рж╣рзЯ?
тЮбя╕П рждржЦржи рждрзБржорж┐ рж╢рзБржзрзБ ржбрж╛ржЯрж╛ ржжрзЗржЦржЫрзЛ, ржХрж┐ржЫрзБ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░ржЫрзЛ ржирж╛ред
рждрж╛ржЗ ржПржЯрж╛ рж╣рж▓рзЛ READ operation (GET request)ред

рзкя╕ПтГг CRUD ржХрзА ржЬрж┐ржирж┐рж╕?
тЮбя╕П CRUD рж╣рж▓рзЛ рзкржЯрж╛ basic database operation-ржПрж░ short form:

C тЖТ Create (POST)

R тЖТ Read (GET)

U тЖТ Update (PUT/PATCH)

D тЖТ Delete (DELETE)

рзля╕ПтГг HTTP-ржПрж░ ржорзЗржержб ржмрж╛ verb ржХрзА ржХрзА ржЖржЫрзЗ? ржХрзЛржиржЯрж╛ ржХрзА ржХрж╛ржЬ ржХрж░рзЗ?

ржорзЗржержб	ржХрж╛ржЬ
GET	ржбрж╛ржЯрж╛ ржкрзЬрж╛ ржмрж╛ ржжрзЗржЦрж╛
POST	ржирждрзБржи ржбрж╛ржЯрж╛ рждрзИрж░рж┐
PUT	ржкрзБрж░рж╛ ржбрж╛ржЯрж╛ ржЖржкржбрзЗржЯ
PATCH	ржЖржВрж╢рж┐ржХ ржбрж╛ржЯрж╛ ржЖржкржбрзЗржЯ
DELETE	ржбрж╛ржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛
HEAD	рж╢рзБржзрзБ header ржЪрж╛ржУрзЯрж╛, body ржирж╛
OPTIONS	рж╕рж╛рж░рзНржнрж╛рж░ ржХрзА ржХрзА ржорзЗржержб рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗ рж╕рзЗржЯрж╛ ржжрзЗржЦрж╛
*/